//
//  ViewController.swift
//  BabyTest
//
//  Created by Kishan Panchotiya on 29/07/23.
//

import UIKit
import Photos
import CropViewController
import CoreML
import SVProgressHUD
class ViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate, CropViewControllerDelegate {

    @IBOutlet weak var fatherImageView: UIImageView!
    @IBOutlet weak var motherImageView: UIImageView!
    @IBOutlet weak var babyImageView: UIImageView!
    
    @IBOutlet weak var ageSegment: UISegmentedControl!
    @IBOutlet weak var genderSegment: UISegmentedControl!
    
    var isFatherSelected = false
    var map_net_model : MLModel?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        
        let modelURL = Bundle.main.url(forResource: "8", withExtension: "mlmodelc")!
        map_net_model = try? MLModel(contentsOf: modelURL)
        SVProgressHUD.setDefaultMaskType(.black)

    }


    @IBAction func fatherTapped(_ sender: Any) {
        self.fatherImageView.image = nil
        self.isFatherSelected = true
        let picker = UIImagePickerController()
        picker.delegate = self
        picker.sourceType = .photoLibrary
        self.present(picker, animated: true, completion: nil)
    }
    @IBAction func motherTapped(_ sender: Any) {
        self.motherImageView.image = nil
        self.isFatherSelected = false
        let picker = UIImagePickerController()
        picker.delegate = self
        picker.sourceType = .photoLibrary
        self.present(picker, animated: true, completion: nil)
    }
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {
        //use image here!
        picker.dismiss(animated: true) {
            guard let image = info[.originalImage] as? UIImage else {
                fatalError("Expected a dictionary containing an image, but was provided the following: \(info)")
            }

            let cropViewController = CropViewController(image: image)
            cropViewController.delegate = self
            cropViewController.customAspectRatio = CGSize(width: 1.0, height: 1.0)
            cropViewController.cropView.aspectRatioLockEnabled = true
            cropViewController.aspectRatioPickerButtonHidden = true
            cropViewController.rotateButtonsHidden = true
            cropViewController.resetButtonHidden = true
            
            self.present(cropViewController, animated: true, completion: nil)
        }
    }

    func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
        dismiss(animated: true, completion: nil)
    }

    func cropViewController(_ cropViewController: CropViewController, didCropToImage image: UIImage, withRect cropRect: CGRect, angle: Int) {
        cropViewController.dismiss(animated: true) {
            SVProgressHUD.show()
            APIManager.getAllignedFaceID(faceImage: image) { alignedImage in
                if let alignedImage = alignedImage{
                    if self.isFatherSelected{
                        self.fatherImageView.image = alignedImage
                    }else{
                        self.motherImageView.image = alignedImage
                    }
                }
                SVProgressHUD.dismiss()
            }
        }
        
        // 'image' is the newly cropped version of the original image
    }
    @IBAction func ageSegmentChanged(_ sender: Any) {
        generateTapped(nil)
    }
    
    @IBAction func genderSegmentChanged(_ sender: Any) {
        generateTapped(nil)
    }
    @IBAction func generateTapped(_ sender: Any?) {
        babyImageView.image = nil

        guard let fatherImage = fatherImageView.image?.resize(to: CGSize(width: 256.0, height: 256.0)), let motherImage = motherImageView.image?.resize(to: CGSize(width: 256.0, height: 256.0)) else{
            return
        }
        
        do {
            guard let map_net_model else {
                fatalError("Failed to create MLModel object from model URL.")
            }

            let fat_img = fatherImage.preprocess()!
            let mot_img = motherImage.preprocess()!

            let fat_lat = try map_net_model.prediction(from: _8Input(x_1: fat_img))
            let mot_lat = try map_net_model.prediction(from: _8Input(x_1: mot_img))
            
            let fatLatArray = fat_lat.featureValue(for: "var_840")?.multiArrayValue
            let motLatArray = mot_lat.featureValue(for: "var_840")?.multiArrayValue

            //combine latents Settings
            let genes_influence = 0.5    // 0 to 1: 0 for fully father and 1 for fully mother
            let gender_inf = Double(genderSegment.titleForSegment(at: genderSegment.selectedSegmentIndex)!)!         // 0.5 for male and -0.5 for female
            let age_ = Double(ageSegment.titleForSegment(at: ageSegment.selectedSegmentIndex)!)!             // value should be from 0 to 70
            /////////////////////
        
            let age_norm = normalizeAgeValue(Double(age_))
         
            let combinedLatArray = try! MLMultiArray(shape: fatLatArray!.shape, dataType: .double)

            let count = fatLatArray!.count
            for i in 0..<count {
                let fatLatValue = fatLatArray![i].doubleValue
                let motLatValue = motLatArray![i].doubleValue
                let combinedLatValue = (1 - genes_influence) * fatLatValue + genes_influence * motLatValue
                let temp1 = (age_norm * age_dir[i])
                let temp2 = (gender_inf * gender_dir[i])
                let combine_all = combinedLatValue + temp1 + temp2
                combinedLatArray[i] = NSNumber(value: combine_all)
            }
            // Synthesis
            
            let synthesisNetwork = try synthesisNetwork(configuration: MLModelConfiguration())
            
            let mlinput = synthesisNetworkInput(style: combinedLatArray)
            let output = try synthesisNetwork.prediction(input: mlinput)
            let buffer = output.activation_out
            let ciImage = CIImage(cvPixelBuffer: buffer)
            guard let safeCGImage = CIContext().createCGImage(ciImage, from: ciImage.extent) else { print("Could not create cgimage."); return}
            let image = UIImage(cgImage: safeCGImage)
            
            babyImageView.image = image
            
        } catch let error {
            fatalError("\(error)")
        }
        
    }
    
    func normalizeAgeValue(_ value: Double) -> Double {
        let oldMin = 0.0
        let oldMax = 70.0
        let newMin = -0.7
        let newMax = 0.7
        
        let normalizedValue = ((value - oldMin) / (oldMax - oldMin)) * (newMax - newMin) + newMin
        return normalizedValue
    }

}

public extension UIImage {
    public func resize(to newSize: CGSize) -> UIImage {
        UIGraphicsBeginImageContextWithOptions(CGSize(width: newSize.width, height: newSize.height), true, 1.0)
        self.draw(in: CGRect(x: 0, y: 0, width: newSize.width, height: newSize.height))
        let resizedImage = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        return resizedImage
    }
    public func pixelData() -> [UInt8]? {
            let dataSize = size.width * size.height * 4
            var pixelData = [UInt8](repeating: 0, count: Int(dataSize))
            let colorSpace = CGColorSpaceCreateDeviceRGB()
            let context = CGContext(data: &pixelData, width: Int(size.width), height: Int(size.height), bitsPerComponent: 8, bytesPerRow: 4 * Int(size.width), space: colorSpace, bitmapInfo: CGImageAlphaInfo.noneSkipLast.rawValue)
            
            guard let cgImage = self.cgImage else { return nil }
            context?.draw(cgImage, in: CGRect(x: 0, y: 0, width: size.width, height: size.height))
            
            return pixelData
    }
    func preprocess() -> MLMultiArray? {
        let size = CGSize(width: 256, height: 256)
        
        guard let pixels = self.resize(to: size).pixelData()?.map({ (Double($0) / 255.0 ) }) else {
            return nil
        }

        guard let array = try? MLMultiArray(shape: [1, 3, 256, 256], dataType: .double) else {
            return nil
        }


        
        let r = pixels.enumerated().filter { $0.offset % 4 == 0 }.map { $0.element }
        let g = pixels.enumerated().filter { $0.offset % 4 == 1 }.map { $0.element }
        let b = pixels.enumerated().filter { $0.offset % 4 == 2 }.map { $0.element }

        // Normalize using provided mean and standard deviation
        let mean: [Double] = [0.485, 0.456, 0.406]
        let stdDeviation: [Double] = [0.229, 0.224, 0.225]

        let normalizedR = r.enumerated().map { ($0.element - mean[0]) / stdDeviation[0] }
        let normalizedG = g.enumerated().map { ($0.element - mean[1]) / stdDeviation[1] }
        let normalizedB = b.enumerated().map { ($0.element - mean[2]) / stdDeviation[2] }

        let normalizedCombination = normalizedR + normalizedG + normalizedB
        for (index, element) in normalizedCombination.enumerated() {
                array[index] = NSNumber(value: element)
            }

        return array
    }
}
public let gender_dir = [-1.178204715251922607e-01,4.485832154750823975e-02,-2.755419313907623291e-01,-1.042993515729904175e-01,-1.337403953075408936e-01,9.589602798223495483e-02,-9.379352629184722900e-02,-1.661238372325897217e-01,-8.888602256774902344e-03,2.729102969169616699e-02,-7.711589336395263672e-03,-1.119217574596405029e-01,1.664306968450546265e-01,2.893084287643432617e-01,-6.930820643901824951e-02,-1.855821907520294189e-01,1.274626255035400391e-01,-7.801172137260437012e-02,-1.198209896683692932e-01,-1.318190246820449829e-01,-1.107380986213684082e-01,-3.548098206520080566e-01,-3.355367481708526611e-02,-1.087091118097305298e-01,8.315232396125793457e-02,-1.832259595394134521e-01,5.992031097412109375e-02,-1.162370070815086365e-01,-5.844870209693908691e-02,-9.301025420427322388e-02,2.119479477405548096e-01,-5.694371834397315979e-02,1.596490480005741119e-02,-7.270996272563934326e-02,-7.691679149866104126e-02,-1.817041635513305664e-01,2.436488270759582520e-01,1.582754701375961304e-01,-1.828134059906005859e-03,-2.446105331182479858e-02,1.154223531484603882e-01,1.037880182266235352e-01,-2.265988290309906006e-01,-1.294508576393127441e-02,-3.298405408859252930e-01,7.364752143621444702e-02,-1.546198129653930664e-02,1.370287239551544189e-01,2.844561338424682617e-01,6.488591432571411133e-02,-7.365365326404571533e-02,4.455874115228652954e-02,4.142522811889648438e-05,1.278239935636520386e-01,9.462291002273559570e-02,1.186529397964477539e-01,1.201284527778625488e-01,-9.130147844552993774e-02,3.066106140613555908e-02,-9.355564415454864502e-02,-1.263245344161987305e-01,1.660341918468475342e-01,7.530994713306427002e-02,1.603464782238006592e-01,-5.768957734107971191e-01,2.509038150310516357e-01,8.568018674850463867e-02,-3.942784368991851807e-01,7.665762305259704590e-02,2.616393566131591797e-01,1.896299421787261963e-02,7.489550113677978516e-02,-1.520060002803802490e-02,2.070063725113868713e-02,-1.987006664276123047e-01,1.225483417510986328e-02,-1.522599011659622192e-01,-1.654843091964721680e-01,1.244557499885559082e-01,3.145014494657516479e-02,7.783636450767517090e-03,-8.744141086935997009e-03,2.313053607940673828e-02,-2.344038486480712891e-01,1.799924969673156738e-01,-4.895062744617462158e-01,-2.006906718015670776e-01,2.974785566329956055e-01,-6.852851808071136475e-02,8.303368091583251953e-02,-5.309359431266784668e-01,-4.577063769102096558e-02,1.060009524226188660e-01,-1.691450476646423340e-01,1.428019404411315918e-01,1.177783012390136719e-01,-1.589609682559967041e-01,-5.182369053363800049e-02,2.509886026382446289e-02,-5.685930699110031128e-02,-3.056945204734802246e-01,-1.144967973232269287e-04,8.496986702084541321e-03,3.662894368171691895e-01,-4.018954932689666748e-02,1.476194262504577637e-01,-6.796994805335998535e-02,-2.134002596139907837e-01,-1.861583292484283447e-01,3.954481482505798340e-01,2.575455307960510254e-01,2.900759875774383545e-01,2.034959197044372559e-02,4.441079497337341309e-02,-2.350096404552459717e-02,1.006783246994018555e-01,-3.631532192230224609e-02,-2.989029884338378906e-01,-1.289445161819458008e-02,-1.172659546136856079e-01,1.384385228157043457e-01,4.046889394521713257e-02,2.929343283176422119e-02,-2.115387320518493652e-01,-3.244918584823608398e-02,2.262997627258300781e-02,-2.080054283142089844e-01,-2.472465336322784424e-01,5.297094583511352539e-02,1.201354116201400757e-01,-4.279234111309051514e-01,-1.932139098644256592e-01,-5.291789770126342773e-02,2.628903090953826904e-01,1.674636602401733398e-01,3.253866732120513916e-01,-2.208931744098663330e-02,1.872082054615020752e-01,6.563872098922729492e-02,1.547219157218933105e-01,1.569809466600418091e-01,-1.194029152393341064e-01,-6.566300988197326660e-03,-1.267896145582199097e-01,-1.275309920310974121e-01,-3.788438439369201660e-02,-4.180786013603210449e-02,4.481643438339233398e-03,-1.086463257670402527e-01,5.731165409088134766e-03,-4.169970154762268066e-01,-1.021778769791126251e-02,-1.699865758419036865e-01,-7.992422580718994141e-02,-2.716884016990661621e-02,-3.296573087573051453e-02,-4.897577315568923950e-02,-7.584285736083984375e-02,5.988720804452896118e-02,-8.734232187271118164e-02,-1.186467260122299194e-01,-4.311567544937133789e-02,3.522907197475433350e-02,-7.984623312950134277e-02,5.083747208118438721e-02,-1.161457970738410950e-03,3.852025270462036133e-01,2.021221518516540527e-01,2.172812819480895996e-02,-1.865875571966171265e-01,5.316883325576782227e-04,-3.665635883808135986e-01,-1.377971172332763672e-01,1.338220834732055664e-01,1.062691211700439453e-02,1.538624018430709839e-01,1.363734900951385498e-02,-9.481787681579589844e-03,2.236227244138717651e-01,-4.095339775085449219e-02,6.026914715766906738e-02,-7.533480226993560791e-02,4.240279644727706909e-02,1.455651670694351196e-01,1.738813966512680054e-01,-2.644823789596557617e-01,5.195171833038330078e-01,-1.050442308187484741e-01,8.005391061305999756e-02,-1.040749400854110718e-01,3.089267015457153320e-01,2.734127044677734375e-01,-1.542003452777862549e-02,4.535951465368270874e-02,-2.094960212707519531e-02,6.573802977800369263e-02,-1.176729500293731689e-01,3.177802264690399170e-01,-4.981154203414916992e-02,-4.121282398700714111e-01,9.726398438215255737e-02,2.290363609790802002e-02,8.766834437847137451e-02,1.495480239391326904e-01,8.865954726934432983e-02,-2.983277440071105957e-01,-2.053448855876922607e-01,-3.532640933990478516e-01,7.890426516532897949e-01,5.293503403663635254e-01,-5.167868733406066895e-02,4.772543907165527344e-04,9.117409586906433105e-02,-4.677022993564605713e-02,-3.172731772065162659e-02,-4.565343260765075684e-03,1.020182073116302490e-01,5.878855586051940918e-01,-2.830953523516654968e-02,9.399474412202835083e-02,6.184486150741577148e-01,7.689431309700012207e-03,8.082455024123191833e-03,3.842734396457672119e-01,8.190751075744628906e-02,1.338921021670103073e-02,-1.811362206935882568e-01,-2.502924799919128418e-01,2.035111486911773682e-01,7.174336910247802734e-02,-1.022529602050781250e-02,-1.812681257724761963e-01,-2.557712197303771973e-01,2.627792060375213623e-01,-3.866231441497802734e-02,-3.000520169734954834e-02,-5.220162123441696167e-02,-1.807322800159454346e-01,-5.186814069747924805e-02,-9.188069403171539307e-02,1.076881065964698792e-01,-1.738241314888000488e-02,-2.740074694156646729e-02,5.409120395779609680e-02,-5.391508340835571289e-03,-4.146525263786315918e-02,3.734326362609863281e-02,-2.917680144309997559e-01,-9.345644712448120117e-02,5.880531668663024902e-02,-1.985253095626831055e-01,-4.530561715364456177e-02,-5.281565338373184204e-02,-2.431792020797729492e-01,-1.217383146286010742e-01,6.814450025558471680e-02,-3.470993041992187500e-02,1.694968342781066895e-02,9.553460776805877686e-02,2.233453840017318726e-01,1.063391119241714478e-01,-6.177704036235809326e-02,4.203300476074218750e-01,8.108089864253997803e-02,-1.796302348375320435e-01,1.631516963243484497e-01,-8.625372499227523804e-02,9.872975945472717285e-02,4.669249057769775391e-02,-2.752363681793212891e-02,1.448730081319808960e-01,-1.073743626475334167e-01,-1.572673320770263672e-01,1.611269265413284302e-01,4.094320163130760193e-02,-2.801623940467834473e-02,1.545861661434173584e-01,4.448234289884567261e-02,-1.834207028150558472e-02,1.257250010967254639e-01,-7.872210443019866943e-02,-2.157383412122726440e-02,1.341091990470886230e-01,-1.361357867717742920e-01,-5.861465632915496826e-02,-7.204297184944152832e-02,1.455066800117492676e-01,-1.044273376464843750e-03,-1.379245519638061523e-01,2.967034280300140381e-02,1.858471333980560303e-02,1.000294089317321777e-01,5.120975524187088013e-02,-3.308248519897460938e-02,1.091912984848022461e-01,7.980518043041229248e-02,8.365932106971740723e-02,2.364176362752914429e-01,9.705080837011337280e-02,2.674975991249084473e-02,-3.618823587894439697e-01,-5.307066440582275391e-02,-2.075958251953125000e-01,-1.564145386219024658e-01,4.499389231204986572e-02,1.344978809356689453e-02,-1.069828867912292480e-03,3.366166353225708008e-02,2.846785262227058411e-02,-1.459396928548812866e-01,-1.401440203189849854e-01,4.362976551055908203e-02,6.793792545795440674e-02,1.605468988418579102e-02,4.284976720809936523e-01,-1.038687303662300110e-02,4.817929267883300781e-01,6.327337026596069336e-02,-7.757513225078582764e-02,9.101811051368713379e-02,-2.705347537994384766e-02,-1.214923933148384094e-01,-1.130338832736015320e-01,5.531460046768188477e-02,2.039435505867004395e-02,2.878135740756988525e-01,6.196001172065734863e-02,1.852836608886718750e-01,8.980286121368408203e-02,-2.214588224887847900e-01,-5.378180742263793945e-02,-3.140588104724884033e-02,6.471657007932662964e-02,1.326678991317749023e-01,5.913525819778442383e-05,2.279439568519592285e-02,4.386311173439025879e-01,2.201102674007415771e-01,1.984985470771789551e-01,-1.293071210384368896e-01,2.488134801387786865e-01,1.517482995986938477e-01,5.903589725494384766e-02,1.739755421876907349e-01,2.264239192008972168e-01,1.072019338607788086e-03,9.639105200767517090e-02,1.365974694490432739e-01,-3.352314233779907227e-04,-1.277214586734771729e-01,1.878691017627716064e-01,-1.323060840368270874e-01,3.086104691028594971e-01,-3.706181794404983521e-02,-2.051153779029846191e-02,-2.064619660377502441e-01,8.305877447128295898e-03,1.427154615521430969e-02,-1.969994604587554932e-02,-2.907027304172515869e-02,2.676145434379577637e-01,2.005600742995738983e-02,-1.874336786568164825e-02,2.874162793159484863e-01,2.919948101043701172e-01,4.123338460922241211e-01,6.796240061521530151e-02,-1.886188387870788574e-01,-3.687588870525360107e-02,1.141063868999481201e-02,-1.253472268581390381e-02,-1.092647463083267212e-01,1.209247112274169922e-01,1.572541296482086182e-01,8.559860289096832275e-02,-2.071731388568878174e-01,1.652648448944091797e-01,-9.723335504531860352e-02,1.496750414371490479e-01,-6.896950304508209229e-02,-1.145802438259124756e-03,1.177448630332946777e-01,-2.915668115019798279e-02,-4.879264906048774719e-02,-1.934614777565002441e-01,-1.865060478448867798e-01,-7.541152834892272949e-02,3.548165261745452881e-01,-2.436312437057495117e-01,-1.252713799476623535e-01,6.194986402988433838e-02,-5.559769272804260254e-02,-2.124499976634979248e-01,8.661989867687225342e-02,3.847968578338623047e-02,-3.107862174510955811e-02,-1.774032860994338989e-01,5.166226625442504883e-02,1.209341362118721008e-01,2.888941764831542969e-02,1.757743656635284424e-01,-6.959617137908935547e-02,4.911479726433753967e-02,2.417360097169876099e-01,5.937093496322631836e-01,-9.070479869842529297e-02,-4.157736524939537048e-02,-1.548321843147277832e-01,-1.850754618644714355e-01,-9.009321033954620361e-02,2.069550752639770508e-01,-7.412856817245483398e-02,5.280264839529991150e-02,-4.067161679267883301e-02,-8.251278102397918701e-02,2.560949623584747314e-01,-2.106938362121582031e-01,6.506121158599853516e-02,-6.814362108707427979e-02,-3.735899925231933594e-02,2.296840846538543701e-01,-2.317565679550170898e-02,-9.754452109336853027e-02,-9.610044211149215698e-02,1.231859996914863586e-01,-2.211202979087829590e-01,-1.353031098842620850e-01,-2.810768783092498779e-02,-5.983286350965499878e-02,-5.238682031631469727e-02,9.632468223571777344e-02,-5.178371816873550415e-02,-2.110069841146469116e-01,4.408693313598632812e-02,1.091288998723030090e-01,-1.256974488496780396e-01,-8.018736541271209717e-02,7.792820036411285400e-02,-2.367795705795288086e-01,1.093368008732795715e-01,3.290557116270065308e-02,-7.012461125850677490e-02,2.118461728096008301e-01,1.506474465131759644e-01,2.716499865055084229e-01,-1.297423243522644043e-02,-9.249328076839447021e-02,1.247721910476684570e-02,1.150540411472320557e-01,-1.460225582122802734e-01,-4.340061545372009277e-02,-1.079852283000946045e-01,-7.693141698837280273e-03,-1.698462367057800293e-01,-6.540253758430480957e-03,-5.631411075592041016e-02,-7.090412825345993042e-02,1.989268660545349121e-01,2.093194723129272461e-01,-6.025247275829315186e-02,-2.467618882656097412e-01,-5.311577022075653076e-02,-4.713575541973114014e-02,-7.944549620151519775e-02,2.313300222158432007e-02,4.334402978420257568e-01,2.379281669855117798e-01,1.927667856216430664e-02,-1.036452651023864746e-01,-1.868507266044616699e-01,5.288327485322952271e-02,-4.136905074119567871e-02,-1.570740044116973877e-01,-1.435132026672363281e-01,3.097872436046600342e-01,2.726256847381591797e-02,1.946264505386352539e-01,5.039528012275695801e-02,-4.450142383575439453e-02,-4.043392091989517212e-02,-1.178957000374794006e-01,-9.539221227169036865e-02,8.771929144859313965e-02,1.841648668050765991e-01,1.817325204610824585e-01,-1.024709641933441162e-01,-4.511348903179168701e-02,1.586015373468399048e-01,-4.380469024181365967e-02,3.162326663732528687e-02,-1.181367188692092896e-01,-2.026737034320831299e-01,8.211125433444976807e-02,2.786383628845214844e-01,-1.065792739391326904e-01,-1.778442263603210449e-01,1.468770951032638550e-01,3.999572396278381348e-01,-3.142368793487548828e-02,-1.935717165470123291e-01,2.833303213119506836e-01,5.778706073760986328e-02,-1.065638363361358643e-01,-2.217034697532653809e-01,2.783799543976783752e-02,3.877161145210266113e-01,-1.252161860466003418e-01,2.361564338207244873e-02,2.635064721107482910e-01,5.805881321430206299e-02,-5.745820701122283936e-02,2.862906455993652344e-01]

public let age_dir = [4.139001667499542236e-02,-4.745045304298400879e-02,-5.853061378002166748e-02,2.037760466337203979e-01,-2.139697372913360596e-01,-3.804993927478790283e-01,-5.772411823272705078e-04,-2.905281782150268555e-01,5.420944690704345703e-01,3.270119428634643555e-02,-3.045989871025085449e-01,-2.086607217788696289e-01,1.286020427942276001e-01,4.839614331722259521e-01,-4.844337701797485352e-03,-3.383639156818389893e-01,6.529650092124938965e-02,1.841324120759963989e-01,-8.374783396720886230e-02,2.444254755973815918e-01,-2.875259518623352051e-01,-2.192044258117675781e-01,1.084531098604202271e-01,-1.804652065038681030e-01,-9.318027645349502563e-02,8.574336767196655273e-02,8.324667811393737793e-02,-1.973998993635177612e-01,8.923728764057159424e-02,4.985164850950241089e-02,2.979006767272949219e-01,-2.587181925773620605e-01,-2.395290732383728027e-01,-1.390085816383361816e-01,-5.802516639232635498e-02,-4.534700512886047363e-01,5.599334239959716797e-01,2.791425287723541260e-01,-1.886879205703735352e-01,-4.445406049489974976e-02,2.041260302066802979e-01,2.687166333198547363e-01,-2.648175507783889771e-02,-1.745255589485168457e-01,-4.975394904613494873e-01,-8.661928027868270874e-02,-1.458698511123657227e-02,-2.012841403484344482e-01,2.702007889747619629e-01,-1.712794005870819092e-01,2.983493208885192871e-01,-5.779601633548736572e-02,2.786475419998168945e-02,1.047465354204177856e-01,3.552020788192749023e-01,8.997216820716857910e-02,1.987383961677551270e-01,-3.832917809486389160e-01,-1.921690404415130615e-01,-2.128447592258453369e-02,1.017522439360618591e-01,3.480563163757324219e-01,-3.772012889385223389e-03,3.522742986679077148e-01,-1.462927460670471191e-01,4.570351243019104004e-01,-1.915317475795745850e-01,-2.922852635383605957e-01,3.706634789705276489e-02,-3.678947687149047852e-03,1.575660705566406250e-02,-3.808153867721557617e-01,-4.410250484943389893e-02,1.990912705659866333e-01,-3.023530840873718262e-01,-1.981198191642761230e-01,-2.625061869621276855e-01,-1.150129735469818115e-01,2.523097395896911621e-01,-8.320100903511047363e-01,4.758685827255249023e-03,5.705114454030990601e-03,-4.298670589923858643e-01,2.073873877525329590e-01,2.127255499362945557e-01,7.470337301492691040e-02,3.112345933914184570e-02,-1.179161667823791504e-02,1.079264283180236816e-02,1.686661839485168457e-01,-1.608287096023559570e-01,3.173112869262695312e-03,1.571042090654373169e-01,-2.195952832698822021e-01,-1.206040382385253906e-03,3.804048895835876465e-01,-2.551122754812240601e-02,1.226959228515625000e-01,1.080076098442077637e-01,-3.273571133613586426e-01,-8.314518630504608154e-02,1.679901592433452606e-02,-2.033796757459640503e-01,3.792583048343658447e-01,9.467793256044387817e-02,-1.796154975891113281e-01,3.610945940017700195e-01,2.517981231212615967e-01,4.981370270252227783e-02,8.921092748641967773e-02,1.978134661912918091e-01,-2.944343686103820801e-01,1.894716173410415649e-01,-1.835756301879882812e-01,-3.275910317897796631e-01,-1.139205694198608398e-02,-3.570765256881713867e-02,-2.289163321256637573e-01,-1.327667832374572754e-01,-1.670243442058563232e-01,9.221342206001281738e-02,1.040781736373901367e-01,1.350247114896774292e-02,-7.663999497890472412e-02,-1.630440354347229004e-01,-2.774938941001892090e-02,-4.344624876976013184e-01,-7.205983996391296387e-01,-4.611763656139373779e-01,1.034956425428390503e-01,-1.413041949272155762e-01,-4.621566236019134521e-01,-1.315500438213348389e-01,8.104915916919708252e-02,1.412363350391387939e-01,8.559437990188598633e-01,-1.187150329351425171e-01,-2.749505341053009033e-01,-7.993727326393127441e-01,4.543064534664154053e-01,5.503813028335571289e-01,1.474351733922958374e-01,-4.831177741289138794e-02,-4.273037910461425781e-01,1.199060454964637756e-01,-2.507573366165161133e-02,-4.802157878875732422e-01,-5.909217596054077148e-01,-1.831806004047393799e-01,-1.572889089584350586e-01,-1.359451264142990112e-01,-2.235035002231597900e-01,-4.918353259563446045e-02,1.960490942001342773e-01,5.738042294979095459e-02,-7.918059825897216797e-03,1.642596721649169922e-02,-1.675386726856231689e-01,-6.099395826458930969e-02,-3.504037857055664062e-02,2.007978558540344238e-01,1.565888226032257080e-01,2.616910636425018311e-02,-2.410399913787841797e-02,-1.908254772424697876e-01,-3.560709059238433838e-01,4.389913678169250488e-01,-2.741158008575439453e-03,1.665330529212951660e-01,-7.077596336603164673e-02,-3.311798572540283203e-01,6.402626633644104004e-02,-2.199011147022247314e-01,-3.705389499664306641e-01,3.592769801616668701e-02,-1.791121065616607666e-01,3.738633990287780762e-01,-2.332162857055664062e-02,-1.278368681669235229e-01,1.886602640151977539e-01,-2.893229126930236816e-01,-3.411630690097808838e-01,-5.864684283733367920e-02,2.719640731811523438e-02,3.719848394393920898e-01,1.486349254846572876e-01,6.314477920532226562e-01,4.063227772712707520e-02,5.112575292587280273e-01,-7.232066988945007324e-02,-1.446962505578994751e-01,-6.097185611724853516e-02,2.303411364555358887e-01,2.844375669956207275e-01,-5.913156270980834961e-02,2.042965888977050781e-01,1.183320954442024231e-01,-4.199194908142089844e-01,-1.626289486885070801e-01,-2.314932942390441895e-01,1.770261228084564209e-01,5.802164971828460693e-02,1.103295981884002686e-01,-5.409096181392669678e-02,-2.865711450576782227e-01,-1.103140413761138916e-01,-6.976920366287231445e-02,-2.571260929107666016e-01,8.617869019508361816e-01,6.561869978904724121e-01,2.806800603866577148e-01,-1.189056038856506348e-02,2.398050427436828613e-01,3.083470463752746582e-02,-2.437453866004943848e-01,1.124513000249862671e-01,4.025584161281585693e-01,1.202112138271331787e-01,-3.277037292718887329e-02,6.087317317724227905e-02,6.090657114982604980e-01,3.580385446548461914e-02,-2.363793998956680298e-01,-2.948210835456848145e-01,1.304984688758850098e-01,-4.194633960723876953e-01,-2.740978896617889404e-01,2.795577645301818848e-01,3.964997529983520508e-01,-3.376721218228340149e-02,1.199507564306259155e-01,-3.093317151069641113e-03,2.759309411048889160e-01,4.465202987194061279e-01,-1.042083501815795898e-01,2.256224602460861206e-01,9.689176082611083984e-02,-9.692949056625366211e-02,6.239032000303268433e-02,-1.168327778577804565e-02,-3.350556492805480957e-01,1.608473062515258789e-02,-3.080978989601135254e-03,2.035088241100311279e-01,-4.223868846893310547e-01,7.569783926010131836e-02,4.863210767507553101e-02,-2.829740643501281738e-01,-3.831261098384857178e-01,-2.830864191055297852e-01,-4.144048988819122314e-01,6.613202393054962158e-03,-1.209832876920700073e-01,-1.559460163116455078e-01,1.422105133533477783e-01,2.732711136341094971e-01,1.882857084274291992e-02,-2.037550508975982666e-02,4.304161667823791504e-02,3.537831902503967285e-01,9.420639276504516602e-02,-1.480529159307479858e-01,-3.247261047363281250e-04,-2.863413691520690918e-01,-1.796666532754898071e-02,3.784216940402984619e-01,-3.678932189941406250e-01,3.924229443073272705e-01,4.069778323173522949e-01,-6.220676004886627197e-02,2.560378015041351318e-01,-8.811878412961959839e-02,-2.235835045576095581e-02,-1.702306717634201050e-01,-2.347403764724731445e-02,2.747442945837974548e-02,-4.194380342960357666e-02,2.002444863319396973e-01,-2.659228444099426270e-01,-7.422648370265960693e-03,-5.011029541492462158e-02,4.266893267631530762e-01,1.735288351774215698e-01,-2.931241393089294434e-01,-6.058225780725479126e-02,3.195260465145111084e-02,5.103291273117065430e-01,-1.607734560966491699e-01,9.654343128204345703e-03,1.494567394256591797e-01,4.301975667476654053e-02,1.450128555297851562e-01,-1.087737083435058594e-01,7.928797602653503418e-02,-9.060548543930053711e-01,-7.646688818931579590e-02,-8.296078443527221680e-02,-1.483069360256195068e-01,1.221420429646968842e-02,-5.012783408164978027e-02,-2.262654006481170654e-01,-2.896769642829895020e-01,-6.044088304042816162e-02,9.459506720304489136e-03,3.828932344913482666e-02,6.626433134078979492e-02,1.829113066196441650e-02,5.148366093635559082e-02,-1.393522620201110840e-01,-1.697352081537246704e-01,4.839241504669189453e-02,-2.952676415443420410e-01,2.779567241668701172e-02,1.839228719472885132e-01,3.123910725116729736e-01,1.079349443316459656e-01,-2.938622832298278809e-01,7.224272936582565308e-02,-2.350197732448577881e-02,-3.298664093017578125e-01,-1.279222965240478516e-02,-2.248569577932357788e-01,-4.271138906478881836e-01,1.796740293502807617e-01,1.332184374332427979e-01,-6.198099255561828613e-02,1.822160780429840088e-01,-5.481415987014770508e-02,3.865182399749755859e-02,-3.363406658172607422e-01,-7.273778319358825684e-01,1.126157045364379883e-01,1.411319822072982788e-01,5.472896099090576172e-01,-3.568157553672790527e-02,-7.579243183135986328e-02,5.687582492828369141e-01,3.223208189010620117e-01,7.211565971374511719e-04,-3.297860026359558105e-01,-5.340347290039062500e-01,4.846419692039489746e-01,2.013636082410812378e-01,1.789265125989913940e-01,3.343934118747711182e-01,-3.531614840030670166e-01,-5.889981985092163086e-04,-6.537626683712005615e-02,6.389940530061721802e-02,-2.578114271163940430e-01,-1.693185716867446899e-01,-1.826548129320144653e-01,4.628282487392425537e-01,-4.787695407867431641e-02,2.167877554893493652e-02,-2.565282285213470459e-01,-1.137202009558677673e-01,-1.627316772937774658e-01,-4.618468135595321655e-02,-4.258116185665130615e-01,2.805454432964324951e-01,2.020517587661743164e-01,-9.431842714548110962e-02,3.083778023719787598e-01,3.499814271926879883e-01,4.879699349403381348e-01,-5.970578193664550781e-01,-4.261599183082580566e-01,-8.268955349922180176e-02,-3.594112992286682129e-01,-9.734987467527389526e-02,-7.274463027715682983e-02,1.127164363861083984e-01,2.600188255310058594e-01,-3.282833471894264221e-02,-7.444210052490234375e-01,2.532473206520080566e-01,9.427551925182342529e-02,2.561835646629333496e-01,3.776162862777709961e-03,3.605837523937225342e-01,1.779763549566268921e-01,2.527741193771362305e-01,-8.324059844017028809e-02,1.558898016810417175e-03,1.141268480569124222e-02,3.613892197608947754e-01,1.546660363674163818e-01,8.340126276016235352e-02,1.707660555839538574e-01,7.297410070896148682e-02,-1.131188571453094482e-01,7.846597582101821899e-02,1.691850721836090088e-01,8.240285515785217285e-02,1.471915841102600098e-01,4.468187689781188965e-04,-3.711656630039215088e-01,-1.319020092487335205e-01,2.547344565391540527e-02,-2.384069114923477173e-01,1.883122920989990234e-01,2.252362668514251709e-01,-1.529285907745361328e-01,1.032270193099975586e+00,-9.145466983318328857e-02,-9.948895126581192017e-02,-3.065938055515289307e-01,1.171365380287170410e-02,-1.628073155879974365e-01,-8.483476936817169189e-03,-9.408245980739593506e-02,3.236750960350036621e-01,-1.737940609455108643e-01,-6.739111989736557007e-02,4.964302778244018555e-01,1.358115822076797485e-01,1.830012500286102295e-01,1.452842354774475098e-01,-7.132944464683532715e-02,-3.249829113483428955e-01,-1.782010495662689209e-01,4.485379159450531006e-02,-1.157416328787803650e-01,9.095122665166854858e-02,-8.798487484455108643e-02,-2.416580021381378174e-01,-8.910129964351654053e-02,-3.326590359210968018e-01,1.642867922782897949e-01,-2.384301871061325073e-01,-2.402202486991882324e-01,-2.327596396207809448e-01,7.077684998512268066e-02,2.610021233558654785e-01,-4.814147204160690308e-02,3.170867562294006348e-01,-6.958247423171997070e-01,-2.831658422946929932e-01,-1.026721000671386719e-01,-6.999205052852630615e-02,5.469816923141479492e-02,1.662701666355133057e-01,9.447488188743591309e-02,4.416311979293823242e-01,-1.509038358926773071e-01,-1.000387966632843018e-01,-4.251084327697753906e-01,3.870349228382110596e-01,3.522802591323852539e-01,-2.201822996139526367e-01,-5.188897252082824707e-02,-1.784223616123199463e-01,-4.252271652221679688e-01,6.697623431682586670e-02,-4.605074822902679443e-01,-1.732113584876060486e-02,8.610963821411132812e-02,-3.297553062438964844e-01,-1.008694469928741455e-01,2.506521344184875488e-02,2.168507426977157593e-01,-7.572415471076965332e-02,-4.463807865977287292e-02,1.579457223415374756e-01,9.579634666442871094e-02,5.678098201751708984e-01,1.290009617805480957e-01,2.183599174022674561e-01,2.290204167366027832e-02,1.371427178382873535e-01,-1.598441153764724731e-01,-1.727612316608428955e-02,1.851077377796173096e-01,1.187217235565185547e-01,-4.753037542104721069e-02,3.337412774562835693e-01,-5.091364383697509766e-01,-9.043166041374206543e-02,-1.835395395755767822e-01,-2.885399758815765381e-01,-1.983952075242996216e-01,9.844610691070556641e-01,1.918992549180984497e-01,5.909957885742187500e-01,-3.824369311332702637e-01,-2.457930445671081543e-01,1.782307922840118408e-01,2.244291007518768311e-01,-2.710528671741485596e-01,-1.334765404462814331e-01,-2.098888158798217773e-03,-8.524577319622039795e-02,4.273314476013183594e-01,8.647128939628601074e-03,3.500576317310333252e-01,4.912218749523162842e-01,4.296512901782989502e-01,-1.083512753248214722e-01,1.091956347227096558e-01,-2.278787791728973389e-01,1.066833585500717163e-01,-2.192490547895431519e-01,-3.839223980903625488e-01,-3.399100899696350098e-02,5.336530208587646484e-01,-1.903834193944931030e-01,1.402230560779571533e-02,3.601779639720916748e-01,9.731043875217437744e-02,1.654265969991683960e-01,6.196116805076599121e-01]
